module BarinovaDAG where

open import Data.Fin
open import Data.Float using (show)
open import Data.List 
open import Data.Maybe
open import Data.Nat
open import Data.Nat.Show using (show)
open import Data.Product 
open import Data.String renaming (_++_ to _+++_)
open import Data.Unit using (⊤; tt)
open import Relation.Binary.PropositionalEquality using (_≡_; _≢_; refl)

open import ArgPrelude
open import ArgSchemes
-- open import ArgVariants
open import LabelAlgebras
open import AIF
open import DAG Pref

-- Statements

S-гладстон-литератор = record
  { text = just "британский литератор Уильям Гладстон"
  ; thesis = Th "Гладстон --- литератор"
  }
S-в-илиаде-нет-синего =
    let t = "В Илиаде нет ни одного упоминания о синем цвете."
    in record { text = just t; thesis = Th t }
T-человечество-в-прошлом-не-видело-синего = record
  { pos = "Человечество в прошлом не видело синего"
  ; neg = "Человечество в прошлом видело синий"
  }
S-человечество-не-видело-синего = record
  { text = just "Еще несколько столетий назад человечество не видело синего цвета."
  ; thesis = Pos T-человечество-в-прошлом-не-видело-синего
  }
T-человечество-в-прошлом-не-различало-цвета = record
  { pos = "Человечество в прошлом не различало цвета"
  ; neg = "Человечество в прошлом различало цвета"
  }
S-человечество-в-прошлом-не-различало-цвета = record
  { text = just "способность четко различать цвета развилась у человека относительно недавно."
  ; thesis = Pos T-человечество-в-прошлом-не-различало-цвета
  }
S-красочные-описания-в-илиаде =
    let t = "по страницам 'Илиады' разбросаны красочные и детальные описания оружия,"
            +++ " лиц, животных, деталей одежды и так далее"
    in record { text = just t; thesis = Th t }
T-гомер-был-слепым = record
  { pos = "Гомер был слепым"
  ; neg = "Гомер не был слепым"
  }
S-гомер-не-был-слепым = record
  { text = just "Версия о том, что Гомер был слепым, давно отвергнута учеными"
  ; thesis = Neg T-гомер-был-слепым
  }



-- Arguments

G : AGraph _
G =
  context (Ln (In record { Body = S-в-илиаде-нет-синего })
              (just (PV 0.2 {refl} {refl})))
           ((поддержка , # 0) ∷ []) &
  context (Ln (Sn (SR A-от-эксперта))
              (just (PV 0.2 {refl} {refl})))
          ((эксперт , # 0) ∷ (говорит , # 1) ∷ (область , # 2) ∷ []) &
  context (Ln (In record { Body = S-гладстон-литератор })
              (just (PV 0.2 {refl} {refl})))
          [] &
  context (Ln (In record
                  { Body = record
                    { text = just ("В 1858 году британский литератор Уильям Гладстон"
                      +++ " заметил, что в 'Илиаде' Гомера нет ни одного упоминания о синем цвете.")
                    ; thesis = Th ("Гладстон говорит, что"
                      +++ " в 'Илиаде' Гомера нет ни одного упоминания о синем цвете.")
                    }})
              (just (PV 0.2 {refl} {refl})))
          [] &
  context (Ln (In record
                  { Body = record
                     { text   = nothing
                     ; thesis = Th "Илиада относится к литературе."
                     }})
              (just (PV 0.2 {refl} {refl})))
           [] &
  ∅
  -- where
  -- a1 = 
  --   let instance
  --        aa : A-от-эксперта
  --        aa = record
  --          { эксперт = S-гладстон-литератор
  --          ; говорит = record
  --            { text = just ("В 1858 году британский литератор Уильям Гладстон"
  --              +++ " заметил, что в 'Илиаде' Гомера нет ни одного упоминания о синем цвете.")
  --            ; thesis = Th ("Гладстон говорит, что"
  --              +++ " в 'Илиаде' Гомера нет ни одного упоминания о синем цвете.")
  --            }
  --          ; область = record
  --            { text   = nothing
  --            ; thesis = Th "Илиада относится к литературе."
  --            }
  --          ; вывод = S-в-илиаде-нет-синего
  --          ; Q1 = nothing
  --          }
  --   in `от-эксперта aa

  -- a2 = 
  --   let instance
  --        aa : A-от-примера
  --        aa = record
  --          { пример = S-в-илиаде-нет-синего
  --          ; вывод = S-человечество-не-видело-синего
  --          }
  --   in `от-примера aa
  
  -- a2' = 
  --   let instance
  --        aa : A-от-примера
  --        aa = record
  --          { пример = S-человечество-не-видело-синего
  --          ; вывод = S-человечество-в-прошлом-не-различало-цвета
  --          }
  --   in `от-примера aa
  
  -- a3 =   
  --   let instance
  --        aa : A-от-знака
  --        aa = record
  --          { знак            = S-красочные-описания-в-илиаде
  --          ; связь-со-знаком = record
  --            { text   = nothing
  --            ; thesis = Th "Красочные описания указывают на зрячесть"
  --            }
  --          ; цель            = S-гомер-не-был-слепым
  --          }
  --   in `от-знака aa

  -- a4 =    
  --   let instance
  --        aa : A-абдукция
  --        aa = record
  --          { факт       = S-красочные-описания-в-илиаде
  --          ; объяснение = S-гомер-не-был-слепым
  --          ; вывод      = S-гомер-не-был-слепым
  --          }
  --   in `абдукция aa

  -- a5 =
  --   let instance
  --        aa : A-от-альтернативы
  --        aa = record
  --          { альтернатива = record
  --            { text = nothing
  --            ; thesis = Th "Гомер мог быть либо слеп, либо не слеп"
  --            }
  --          ; неверно = S-красочные-описания-в-илиаде
  --          ; верно = S-гомер-не-был-слепым
  --          }
  --   in `от-альтернативы aa

  -- a6 =
  --   let instance
  --        aa : A-от-эксперта
  --        aa = record
  --          { эксперт = S-гладстон-литератор
  --          ; говорит = record
  --            { text = just ("Исследователь, подняв другие древнегреческие тексты, обнаружил, "
  --              +++ "что ни в одном из них нет слова 'синий'.")
  --            ; thesis = Th "Гладстон обнаружил, что в др.-греч. текстах нет слова 'синий'."
  --            }
  --          ; область = record
  --            { text = nothing
  --            ; thesis = Th "Древнегреческие тексты относятся к литературе"
  --            }
  --          ; вывод = record
  --            { text = just "В древнегреческих текстах нет слова 'синий'."
  --            ; thesis = Th "В древнегреческих текстах нет слова 'синий'."
  --            }
  --          ; Q1 = nothing
  --          }
  --   in `от-эксперта aa

  -- a7 =
  --   let instance
  --        aa : A-от-примера
  --        aa = record
  --          { пример =
  --              let t = "в древнегреческих текстах нет слова 'синий'."
  --              in record { text = just t; thesis = Th t }
  --          ; вывод = S-человечество-в-прошлом-не-различало-цвета
  --          }             
  --   in `от-примера aa

  -- a8 =
  --   let instance
  --        aa : A-от-причины-к-следствию
  --        aa = record
  --          { причинная-связь = record
  --            { text = nothing
  --            ; thesis = Th "Если цвет не встречают часто, то его не различают"
  --            }
  --          ; причина = record
  --            { text = just "В природе же, действительно, синий цвет распространен мало"
  --            ; thesis = Th "В природе синий цвет распространен мало"
  --            }
  --          ; следствие = S-человечество-не-видело-синего 
  --          }
  --   in `от-причины-к-следствию aa
  



------------------------------------------------------------------------

open import ShowDAG

open import IO

main = run (putStrLn stringToPrint)
  where
    =line = "\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = "
    pre = "  "

    stringToPrint = ""
      +++ =line +++ sh "  " G
